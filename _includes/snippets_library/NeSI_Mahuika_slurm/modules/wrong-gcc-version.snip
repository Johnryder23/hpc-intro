Let's take a closer look at the `GCC` module. GCC is a widely used
C/C++/Fortran compiler. Tons of software is dependent on the GCC version, and
might not compile or run if the wrong version is loaded. In this case, there
are many different versions: `GCC/5.4.0`, `GCC/6.3.0` through `GCC/9.2.0`. 
How do we load each copy and which copy is the default?

In this case, `GCC/9.2.0` has a `(D)` next to it. This indicates that it is the
default &mdash; if we type `module load GCC`, this is the copy that will be
loaded.

```
{{ site.remote.prompt }} module load GCC
{{ site.remote.prompt }} gcc --version
```
{: .language-bash}

```
gcc (GCC) 9.2.0
Copyright (C) 2019 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```
{: .output}

So how do we load the non-default copy of a software package? In this case, the
only change we need to make is be more specific about the module we are
loading. There are many other GCC versions.  To load a
non-default module, the only change we need to make to our `module load`
command is to add the version number after the `/`.

```
{{ site.remote.prompt }} module load GCC/5.4.0
```
{: .language-bash}

```
The following have been reloaded with a version change:
  1) GCC/9.2.0 => GCC/5.4.0     2) GCCcore/9.2.0 => GCCcore/5.4.0     3) binutils/2.32-GCCcore-9.2.0 => binutils/2.26-GCCcore-5.4.0

```
{: .output}

Notice how the module command has swapped out versions of the GCC module as well as it's dependencies. This is quite helpful as it reconciles all of the software requirements with one command.
And now we test which version we are using:

```
{{ site.remote.prompt }} gcc --version
```
{: .language-bash}

```
gcc (GCC) 5.4.0
Copyright (C) 2015 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
```
{: .output}

We are now left with only those module required to do our work for this project.

```
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modules:
  1) XALT/minimal   3) NeSI                      (S)   5) GCCcore/5.4.0                 7) GCC/5.4.0
  2) slurm          4) zlib/1.2.11-GCCcore-9.2.0       6) binutils/2.26-GCCcore-5.4.0
  ```

  {: .output}